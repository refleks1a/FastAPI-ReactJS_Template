# The docker-compose.override.yml file is automatically interpreted by docker-compose program along with docker-compose.yml
#
# The docker-compose.override.yml file is NOT interpreted if you specify the docker-compose file explicitly with -f flag like
# docker-compose up -f docker-compose.yml --> docker-compose.override.yml is NOT going to be processed.
#
# override file used on developer workstations to bind volumes for direct code modifications.
version: '3.8'
services:
  # react application
  todo-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      # @see https://stackoverflow.com/a/51099232
      - ./frontend:/app

  # flask application -- API part
  todo-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend/:/code

  # # flask application -- worker part (rq)
  # qualis-worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/:/app

  # # flask application -- worker part (rq)
  # qualis-scheduler:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend/:/app

  # # sphinx documentation application
  # qualis-doc:
  #   build:
  #     context: ./doc
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./doc/:/docs

  # reverse proxy for frontend/backend (fixes problems with CORS and simpler to deploy)
  todo-reverse-proxy:
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile

  # # postgres database, data is persisted in a volume
  # qualis-postgres:
  #   ~

  # # pgadmin to view and control the database
  # qualis-pgadmin:
  #   ~

  # # fake smtp server to intercept and view sent emails
  # qualis-mailhog:
  #   ~

  # # redis database, data is persisted in a volume
  # qualis-redis:
  #   ~

  # # web front-end to monitor your RQ queues, jobs, and workers in realtime
  # qualis-rq-dashboard:
  #   build:
  #     context: ./rq-dashboard
  #     dockerfile: Dockerfile

